name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  - main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab.
# Otherwise comment out the line below.
pool: myAgentPool

variables:
  - group: PipelineEnv
  # ToDo: Replace the service connection name as used in the DevOps project settings
  - name: azureServiceConnectionId
    value: "myServiceConnection"
  # Project root folder. Point to the folder containing manage.py file.
  - name: projectRoot
    value: $(System.DefaultWorkingDirectory)
  # Environment name
  - name: environmentName
    value: "test"

stages:
  - stage: Build
    jobs:
      - job: BuildInfrastructure
        steps:
          - task: DownloadSecureFile@1
            name: id_rsa2
            displayName: "Download RSA key"
            inputs:
              secureFile: "id_rsa"

          - task: DownloadSecureFile@1
            name: id_rsa2_pub
            displayName: "Download RSA key"
            inputs:
              secureFile: "id_rsa.pub"

          - script: |
              echo Installing $(id_rsa.secureFilePath) to the ssh...
              sudo cp -f $(id_rsa.secureFilePath) ~/.ssh/
              echo Installing $(id_rsa_pub.secureFilePath) to the ssh...
              sudo cp -f $(id_rsa_pub.secureFilePath) ~/.ssh/
              sudo chown $USER:$USER ~/.ssh/*
              sudo chmod 600 ~/.ssh/id_rsa
              sudo chmod 600 ~/.ssh/id_rsa.pub
              export ARM_ACCESS_KEY=$(az storage account keys list --resource-group Azuredevops --account-name tfstate070119820513  --query '[0].value' -o tsv)
            displayName: Preparation

          # Install Terraform on the pipeline agent
          - task: TerraformInstaller@1
            displayName: "Terrafom installation"
            inputs:
              terraformVersion: "1.8.3"

          - task: TerraformCLI@1
            displayName: "terraform init"
            inputs:
              backendType: azurerm
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              backendServiceArm: "$(azureServiceConnectionId)"
              backendAzureRmResourceGroupName: "Azuredevops"
              backendAzureRmStorageAccountName: "tfstate070119820513"
              backendAzureRmContainerName: "tfstate"
              backendAzureRmKey: "test.terraform.tfstate"
            env:
              TF_VAR_subscription_id: "$(TF_VAR_subscription_id)"
              TF_VAR_client_id: $(TF_VAR_client_id)
              TF_VAR_client_secret: $(TF_VAR_client_secret)
              TF_VAR_tenant_id: $(TF_VAR_tenant_id)
              TF_VAR_azure_devops_pat: $(TF_VAR_azure_devops_pat)

          - task: TerraformCLI@1
            displayName: "terraform validate"
            inputs:
              backendType: azurerm
              command: "validate"

          - task: TerraformCLI@1
            displayName: "terraform apply"
            inputs:
              backendType: azurerm
              command: "apply"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              environmentServiceNameAzureRM: "$(azureServiceConnectionId)"
            env:
              TF_VAR_subscription_id: "$(TF_VAR_subscription_id)"
              TF_VAR_client_id: $(TF_VAR_client_id)
              TF_VAR_client_secret: $(TF_VAR_client_secret)
              TF_VAR_tenant_id: $(TF_VAR_tenant_id)
              TF_VAR_azure_devops_pat: $(TF_VAR_azure_devops_pat)

          #--------------------------------------------#
          - task: UseNode@1
            inputs:
              version: "20.x"
            displayName: "Install Node.js"

          # Postman - Install Newman
          - task: CmdLine@2
            displayName: Install Newman
            inputs:
              script: "npm install -g newman"
              workingDirectory: $(System.DefaultWorkingDirectory)
          # Postman Data Validation Test Suite
          - task: CmdLine@2
            displayName: Run Data Validation Tests
            continueOnError: true
            inputs:
              script: "newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml"
              workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"
          # Postman Regression Test Suite
          - task: CmdLine@2
            displayName: Run Regression Tests
            continueOnError: true
            inputs:
              script: "newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml"
              workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"
          # Postman - Publish Results
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/TEST-*.xml"
              searchFolder: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"
              mergeTestResults: true
              testRunTitle: "Postman Test Result"

          #--------------------------------------------#
          # Selenium (UI) Test Suite - Archive the package
          # "ArchiveFiles@2" picks up the web package and archives it.
          - task: ArchiveFiles@2
            displayName: "Archive UI Tests"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/selenium"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip"
          # Selenium Test Suite - Publish the package
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip # Same as the archiveFile artifact above.
            displayName: "Upload Package"
            artifact: drop-uitests

          #--------------------------------------------#
          # FakeRestAPI - Archive
          # ToDo: Complete the ArchiveFiles@2 task and publish step
          - task: ArchiveFiles@2
            displayName: "Archive FakeRestAPI"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip"

          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
            displayName: "Upload Package"
            artifact: drop-fakerestapi

          #--------------------------------------------#
          # JMeter (Performance) Test Suite - Archive
          - task: ArchiveFiles@2
            displayName: "Archive PerformanceTestSuite"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/testsuite"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip"
          # JMeter Test Suite - Publish
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
            displayName: "Upload Package"
            artifact: drop-perftests

  #--------------------------------------------#
  # DEPLOYMENT STAGE
  #--------------------------------------------#
  - stage: Deploy
    dependsOn: Build
    jobs:
      #--------------------------------------------#
      # Deploy FakeRestAPI Web App
      - deployment: FakeRestAPI
        environment:
          name: test
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: "Deploy Azure Web App"
                  inputs:
                    azureSubscription: "$(azureServiceConnectionId)"
                    appName: "myApplication-AppService"
                    appType: webApp
                    package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
                #--------------------------------------------#
                # Run JMeter test suite against the App Service
                - task: CmdLine@2
                  displayName: "Performance test"
                  inputs:
                    script: |
                      export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
                      wget -q "https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz"
                      tar -xf apache-jmeter-5.6.3.tgz
                      unzip -o $(Build.BuildId)-perftests.zip
                      rm -Rf test-report
                      ./apache-jmeter-5.6.3/bin/jmeter -n -t ./PerformanceTestSuite.jmx -l test-report/test-results.jtl -e -o test-report
                      cat ./jmeter.log
                    workingDirectory: $(Pipeline.Workspace)/drop-perftests
      #--------------------------------------------#
      # Selenium | Functional UI Tests
      # ToDo:
      - deployment: VMDeploy
        displayName: Selenium Tests
        environment:
          name: test
          resourceType: VirtualMachine
          tags: selenium
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop-uitests

                - task: Bash@3
                  displayName: "UI test"
                  inputs:
                    targetType: "inline"
                    script: |
                      #! /bin/bash

                      sudo apt-get -y install unzip
                      pip install selenium

                      export BASE=/home/vmuser

                      cd $BASE/
                      DIR=$BASE/app
                      if [ ! -d "$DIR" ]; then
                          mkdir app
                      fi
                      mv $BASE/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip $DIR
                      cd $DIR
                      unzip -o $(Build.BuildId)-uitests.zip
                      FILE=$DIR/chromedriver-linux64.zip
                      if [ ! -f "$FILE" ]; then
                          wget -q https://storage.googleapis.com/chrome-for-testing-public/125.0.6422.76/linux64/chromedriver-linux64.zip
                          unzip -o chromedriver-linux64.zip
                          sudo ln -s -f $PWD/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
                      fi
                      export PATH=$PATH:$DIR
                      echo "Starting Selenium Tests"
                      python3 add_remove_from_cart.py >> selenium.log
                      echo "Completed Selenium Tests. Check selenium.log for results."
