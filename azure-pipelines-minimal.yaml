name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  - main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab.
# Otherwise comment out the line below.
pool: myAgentPool

variables:
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: "myServiceConnection"
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: "test"

stages:
  - stage: Build
    jobs:
      - job: BuildInfrastructure
        steps:
          # Install Terraform on the pipeline agent
          - task: TerraformInstaller@1
            displayName: "Terrafom installation"
            inputs:
              terraformVersion: "1.8.3"

          - task: TerraformCLI@1
            displayName: "terraform init"
            inputs:
              backendType: azurerm
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              backendServiceArm: "$(azureServiceConnectionId)"
              backendAzureRmResourceGroupName: "Azuredevops"
              backendAzureRmStorageAccountName: "tfstate070119820513"
              backendAzureRmContainerName: "tfstate"
              backendAzureRmKey: "test.terraform.tfstate"

          - task: TerraformCLI@1
            displayName: "terraform validate"
            inputs:
              backendType: azurerm
              command: "validate"

          - task: TerraformCLI@1
            displayName: "terraform apply"
            inputs:
              backendType: azurerm
              command: "apply"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              environmentServiceNameAzureRM: "$(azureServiceConnectionId)"

          - task: TerraformCLI@1
            displayName: "terraform destroy"
            inputs:
              backendType: azurerm
              command: "destroy"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              environmentServiceNameAzureRM: "$(azureServiceConnectionId)"
